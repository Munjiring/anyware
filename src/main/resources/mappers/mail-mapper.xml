<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="mailMapper">

<resultMap id="addressResult" type="AddressBook">
	<id column="add_no" property="addNo" />
	<result column="name" property="name" />
	<result column="dept_name" property="deptName" />
	<result column="job_name" property="jobName" />
	<result column="email" property="email" />
	<result column="phone" property="phone" />
	<result column="biz_name" property="bizName" />
	<result column="group_no" property="groupNo" />
	<result column="mem_no" property="memNo" />
	<result column="group_name" property="groupName" />
	<result column="nameMail" property="nameMail" />

</resultMap>

<resultMap id="groupResult" type="AddressGroup">
	<id column="group_no" property="groupNo" />
	<result column="group_name" property="groupName" />
	<result column="member_no" property="memNo" />
	
</resultMap>


<resultMap id="memberResult" type="Member">
	<id column="member_no" property="memberNo"/>
	<result column="dept_name" property="deptName"/>
	<result column="job_name" property="jobName"/>
	<result column="position" property="position"/>
	<result column="duty" property="duty"/>
	<result column="name" property="name"/>
	<result column="rrn" property="rrn"/>
	<result column="member_id" property="memberId"/>
	<result column="member_pwd" property="memberPwd"/>
	<result column="email" property="email"/>
	<result column="phone" property="phone"/>
	<result column="address" property="address"/>
	<result column="enroll_date" property="enrollDate"/>
	<result column="leave_off" property="leaveOff"/>
	<result column="profile_url" property="profileUrl"/>
	
</resultMap>


<resultMap id="mailResult" type="Mail">
	<id column="em_no" property="emNo" />
	<result column="em_title" property="emTitle"/>
	<result column="em_content" property="emContent" />
	<result column="mem_name" property="memName" />
	<result column="sender" property="sender" />
	<result column="receiver" property="receivers" />
	<result column="ref_email" property="refEmail" />
	<result column="send_date" property="sendDate" />
	<result column="temp_stock" property="tempStock" />
	<result column="temp_date" property="tempDate" />
	
	<association property="mailStatus" resultMap="mailStatusResult" />
	<collection property="fileList" resultMap="mailFileResult" />
</resultMap>

<resultMap id="mailStatusResult" type="MailStatus">	
	<result column="em_type" property="emType"/>
	<result column="receiver_Name" property="receiverName" />
	<result column="receiver" property="receiver" />
	<result column="read" property="read" />
	<result column="read_time" property="readTime" />
	<result column="important" property="important" />
	<result column="trash" property="trash" />
	<result column="spam" property="spam" />
	<result column="sender" property="sender" />

</resultMap>

<resultMap id="mailFileResult" type="MailFile">
	<id column="emf_no" property="emfNo" />
	<result column="origin_name" property="originName" />
	<result column="change_name" property="changeName" />
	<result column="file_path" property="filePath" />
	<result column="file_size" property="fileSize" />

</resultMap>



<!-- 개인주소록 조회 -->
<!-- 주소록 갯수 -->
<select id="selectAddressListCount" resultType="_int">
	select count(*)
	  from tb_addressbook
	 where status = 'Y'
	 and mem_no = #{memNo} 
</select>

<!--주소록 리스트 -->
<select id="selectAddbookList" resultMap="addressResult">
	select 
	        add_no
	       , name
	       , dept_name
	       , job_name
	       , email
	       , phone
	       , biz_name
	       , b.group_no
	       , group_name
	       , mem_no
	from tb_addressbook b
	join tb_addressgroup g on (b.group_no = g.group_no)
	where b.status = 'Y' 
	  and mem_no = #{memNo} 
	 order by add_no desc

</select>

<!--로그인한 회원의 주소록 그룹리스트 -->
<select id="selectGroupList" resultMap="groupResult">
	select
		   group_no
		  ,group_name
		  ,member_no
      from tb_addressgroup
      where member_no = #{memNo}  <!--로그인한 사원번호로 변경하기 -->
      and status= 'Y' 
      order by group_no asc
</select>

<!-- 그룹추가 -->
<insert id="insertAddressGroup">
	insert 
	  into tb_addressgroup
	  (
	    group_no
	  , group_name
	  , member_no
	  )
	  values
	  (
	  seq_gno.nextval
	  ,#{groupName}
	  ,#{memNo}
	  )

</insert>
<!-- 등록한 그룹 조회 -->
<select id="selectInsertGroup" resultMap="groupResult">

	select
			group_no
			,group_name
			,member_no
	from  tb_addressgroup
	where member_no = #{memNo}
	  and status= 'Y'
	  and group_name= #{groupName}

</select>

<!-- 그룹명 수정 -->
<update id="updateGroupName">
	update
		   tb_addressGroup
      set  group_name = #{groupName}		   
     where group_no = #{groupNo}
</update>

<!-- 그룹삭제  -->
<delete id="deleteGroup">
	delete
	  from tb_addressgroup
	  where group_no = #{groupNo}
 </delete>	

<!-- 주소록추가 -->
<insert id="insertAddressBook">
	insert 
	  into tb_addressbook
	  (
	   add_no
	  , name
	  , dept_name
	  , job_name
	  , email
	  , phone
	  , biz_name
	  , group_no
	  , mem_no
	  )
	values
	(  
	  seq_abno.nextval
	 ,#{name}
	 ,#{deptName}
	 ,#{jobName}
	 ,#{email}
	 ,#{phone}
	 ,#{bizName}
	 ,#{groupNo}
	 ,#{memNo} 

	  )
	  

</insert>

<!-- 주소록 삭제 -->
<delete id="deleteAddressBook">
	delete
		from tb_addressbook
	  where add_no in 
			<foreach item="addPerNo" index="i" collection="array"
				open="(" separator="," close=")">
				#{addPerNo}
			</foreach>
</delete>

<!-- 선택한 주소록 정보 -->
<select id="selectAddressInfo" resultMap="addressResult">
 	select 
 	    	add_no
		  , name
		  , dept_name
		  , job_name
		  , email
		  , phone
		  , biz_name
		  , group_no
		  , mem_no
	 from tb_addressbook
	 where add_no = #{addNo}

</select>

<!-- 주소록 수정 -->
<update id="updateAddressBook">
	update
			tb_addressbook
	   set   
	         name = #{name}
	       , dept_name = #{deptName}
	       , job_name = #{jobName}
	       , email = #{email}
	       , phone = #{phone}
	       , biz_name = #{bizName}
	       , group_no = #{groupNo}
	 where add_no = #{addNo}      
	       	
</update>	


<!-- 그룹별 리스트개수 -->
<select id="selectGroupAddListCount" resultType="_int">
	select count(*)
      from tb_addressbook
	where status = 'Y'
	  and mem_no = #{memNo}
	  and group_no = #{groupNo} 

</select>

<!--그룹별 주소록 리스트 -->
<select id="selectGroupAddList" resultMap="addressResult">
	select 
	        add_no
	       , name
	       , dept_name
	       , job_name
	       , email
	       , phone
	       , biz_name
	       , b.group_no
	       , group_name
	       , mem_no
	from tb_addressbook b
	join tb_addressgroup g on (b.group_no = g.group_no)
	where b.status = 'Y' 
	
	  and b.group_no = #{groupNo}
	 order by add_no desc
	 

</select>

<!--사내 주소록 조회 -->
<select id="selectCompanyListCount" resultType="_int">
	select count(*)  		
	   from tb_member
	   where status = 'Y'

</select>
<select id="selectCompanyList" resultMap="memberResult">
	 select 
	  		 member_no
	  		,dept_name
	  		,job_name
	  		,name
	  		,member_id
	  		,email
	  		,phone
	  		,email
	  		,address
	  		,enroll_date
	  		,profile_url
	   from tb_member
	   where status = 'Y'
	  order by name asc
</select>

<!--부서별 주소록 -->
<select id="selectdeptAddBookListCount" resultType="_int">
  select count(*)  		
   from tb_member
   where status = 'Y'
   and dept_name = #{deptName}

</select>

<select id="selectdeptAddBookList" resultMap="memberResult">
	 select 
	  		 member_no
	  		,dept_name
	  		,job_name
	  		,name
	  		,member_id
	  		,email
	  		,phone
	  		,email
	  		,address
	  		,enroll_date
	  		,profile_url
	   from tb_member
	   where status = 'Y'
	   and dept_name = #{deptName}
	  order by name asc
</select>
	


<!--메일리스트-->
<!-- 받은메일 개수조회 -->
<select id="selectReceiveMailListCount" resultType="_int">
	select count(m.em_no) "count"
	 from tb_mail m
	 join  tb_mail_status  s on (m.em_no = s.em_no)
	 left outer join tb_mail_file f on (m.em_no = f.em_no)
	 where em_type in (1,2)
	 and s.receiver = #{memId}
	 and trash = 'N'
	 and spam = 'N'

</select>
<!-- 받은메일 리스트  -->
<select id="selectReceiveMailList" resultMap="mailResult">
	select m.em_no
	     , em_title
	     , em_content
	     , mem_name
	     , sender
	     , to_char(send_date,'YYYY-MM-DD(DY) HH24:MI:SS') "send_date"
	     , em_type
	     , receiver_name
	     , s.receiver
	     , s.read
	     , s.important
	     , trash
	     , spam
	     , f.emf_no
	 from tb_mail m
	 join  tb_mail_status  s on (m.em_no = s.em_no)
	 left outer join tb_mail_file f on (m.em_no = f.em_no)
	 where em_type in (1,2)
	 and s.receiver = #{memId}
	 and trash = 'N'
	 and spam = 'N'
     order by m.em_no desc

</select>

<!--안읽은 메일 수 조회 -->
<select id="selectUnreadReceiveMail" resultType="_int">
 select  NVL(count(read), 0) as "unread"
	from tb_mail_status
	where read= 'N'
	and em_type in (1,2)
	and receiver = #{memId}
	and trash = 'N'
	and spam = 'N'


</select>


<!-- 메일주소록 조회 -->
<select id="addressbookGroupList" resultMap="addressResult">
	SELECT 
	    group_name,
	    name || ' ' || email as nameMail
	    ,name
	    ,email
	   , b.add_no
	FROM 
	    tb_addressbook b
	    JOIN tb_addressgroup g ON (b.group_no = g.group_no)
	WHERE 
	    b.status = 'Y' 
	    AND mem_no = #{memNo}
	ORDER BY 
	    group_name, name

</select>

<!--메일 사내 주소록 조회 -->
<select id="addressBookMemberList" resultMap="memberResult">
	select
	       dept_name
	      ,name
	      ,member_id
	      ,name || ' ' || member_id ||'@anyware.com' as email
	      ,member_no
	from tb_member
	order by 1,2
 
</select>

<!-- 메일 보낸적있는 멤버 조회 -->
<select id="receiverMemberList" resultMap="mailStatusResult">
	select distinct
	       s.receiver
	      , receiver_name
	      , sender
	     
	 from tb_mail_status s
	 join tb_mail m on(s.em_no = m.em_no)
	 where em_type in (1,2)
	 and sender = #{memId}
 
</select>

<!-- 보낸메일 개수조회 -->
<select id="selectSendMailListCount" resultType="_int">
	select 
	      count(m. em_no) "count"
	   
	from tb_mail m
	join tb_mail_status s on (m.em_no = s.em_no)
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where  em_type = 0
	 and sender=#{memId}
	 and trash = 'N'
	 and spam = 'N'
	 and temp_stock = 'N'
</select>

<!-- 보낸메일함 조회 -->
<select id="selectSendMailList" resultMap="mailResult">
 select 
 		 m. em_no
        , sender
	    , em_title
	    , em_content
	    , to_char(send_date,'YYYY-MM-DD(DY) HH24:MI:SS') "send_date"
	    , receiver_name
	    , m.receiver
	    , ref_email
	    , read
	    , important
	    , emf_no
	from tb_mail m
	join tb_mail_status s on (m.em_no = s.em_no)
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where em_type = 0
	 and sender= #{memId}
	 and trash = 'N'
	 and spam = 'N'
	 and temp_stock = 'N'
   order by m.em_no desc

</select>

<!-- 메일쓰기 메일테이블insert -->
<insert id="insertSendMail">
	insert 
	  into tb_mail
	  (
	    em_no
	   ,em_title
	   ,em_content
	   ,mem_name
	   ,sender
	   ,receiver
	   ,ref_email
	  )
	  values
	  (
	   seq_emno.nextval
	   ,#{emTitle}
	   ,#{emContent}
	   ,#{memName}
	   ,#{sender}
	   ,#{receivers}
	   ,#{refEmail}
	  
	  )

</insert>

<!--메일쓰기 메일상태테이블 insert-->
<insert id="insertMailStatus">
	 insert
	   into tb_mail_status
	   (
	    em_no
	   ,em_type
	   ,receiver_name
	   ,receiver
	   )
	   values
	   (
	   seq_emno.currval
	   ,#{emType}
	   ,#{receiverName}
	   ,#{receiver}
	   
	   )
	
</insert>




<!-- 중요메일 개수 -->
<select id="selectImportantMailCount" resultType="_int">
 select 
 		 count(m. em_no) "count"
	from tb_mail m
	join tb_mail_status s on (m.em_no = s.em_no)
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where (sender= #{memId} and s.receiver is null
	 or s.receiver = #{memId})
	 and trash = 'N'
	 and spam = 'N'
     and important = 'Y'
   order by m.em_no desc


</select>

<!-- 중요메일함 리스트 -->
<select id="selectImportantMailList" resultMap="mailResult">
     select 
 		 m. em_no
        , sender
        , mem_name
        , em_type
	    , em_title
	    , em_content
	    , to_char(send_date,'YYYY-MM-DD(DY) HH24:MI:SS') "send_date"
	    , receiver_name
	    , m.receiver
        , s.receiver
	    , read
	    , important
	    , emf_no
	from tb_mail m
	join tb_mail_status s on (m.em_no = s.em_no)
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where (sender= #{memId} and s.receiver is null
	 or s.receiver = #{memId})
	 and trash = 'N'
	 and spam = 'N'
     and important = 'Y'
   order by m.em_no desc

</select>

<!-- 중요메일 체크시 -->

<update id="checkImportantMail">
  update tb_mail_status
     set important = 'Y'
     where em_no = #{emNo}
     <choose>
     	<when test="receiver == null">
     		 and  receiver is null
     	</when>
     	<otherwise>
     		and  receiver = #{receiver}
     	</otherwise>
     </choose>
     

      
</update>


<!-- 중요메일 체크해제시 -->

<update id="uncheckImportantMail">
  update tb_mail_status
     set important = 'N'
     where em_no = #{emNo}
     <choose>
	     <when test="receiver == null">
	     		 and  receiver is null
	     	</when>
	     	<otherwise>
	     		and  receiver = #{receiver}
	     	</otherwise>
      </choose>
</update>

<!-- 메일 읽음으로 표시 -->
<update id="checkReadMail">
	update tb_mail_status
	   set read = 'Y'
	 where em_no = #{emNo}
	<choose>
	     <when test="receiver == null">
	     		 and  receiver is null
	     	</when>
	     	<otherwise>
	     		and  receiver = #{receiver}
	     	</otherwise>
      </choose>

</update>


<!-- 메일 안읽음으로 표시 -->
<update id="uncheckReadMail">
	update tb_mail_status
	   set read = 'N'
	 where em_no = #{emNo}
	 <choose>
	     <when test="receiver == null">
	     		 and  receiver is null
	     	</when>
	     	<otherwise>
	     		and  receiver = #{receiver}
	     	</otherwise>
      </choose>

</update>

<!-- 내게쓴메일 개수 -->
<select id="selectSendToMeMailCount" resultType="_int">
select 
 		 count(m. em_no) "count"    
	from tb_mail m
	join tb_mail_status s on (m.em_no = s.em_no)
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where em_type = 3
	 and sender = #{memId}
     and s.receiver = #{memId}
	 and trash = 'N'
	 and spam = 'N'
   order by m.em_no desc


</select>

<!--내게쓴 메일함리스트 -->
<select id="selectSendToMeMailList" resultMap="mailResult">
 select 
 		 m. em_no
 		, mem_name 
        , sender
	    , em_title
	    , em_content
	    , to_char(send_date,'YYYY-MM-DD(DY) HH24:MI:SS') "send_date"
	    , receiver_name
	    , m.receiver
	    , read
	    , important
	    , emf_no
	from tb_mail m
	join tb_mail_status s on (m.em_no = s.em_no)
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where em_type = 3
	 and sender = #{memId}
     and s.receiver = #{memId}
	 and trash = 'N'
	 and spam = 'N'
   order by m.em_no desc

</select>

<!-- 임시보관함 개수  -->

<select id="selectTempStorageMailCount" resultType="_int">
select 
 		count(m. em_no)
	  
	from tb_mail m
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where sender= #{memId}
     and temp_stock = 'Y'
   order by m.em_no desc

</select>


<!-- 임시보관함 리스트 -->
<select id="selectTempStorageMailList" resultMap="mailResult">
select 
 		 m. em_no
	    , em_title
	    , em_content
        , mem_name
        , sender
	    , to_char(send_date,'YYYY-MM-DD(DY) HH24:MI:SS') "send_date"
	    , receiver
        , ref_email
	    , emf_no
	    , to_char(temp_date,'YYYY-MM-DD(DY) HH24:MI:SS') "temp_date"
	from tb_mail m
	left outer join tb_mail_file f on (m.em_no = f.em_no)
	where sender= #{memId}
     and temp_stock = 'Y'
   order by m.em_no desc


</select>

<insert id="saveTemporaryMail">
  insert 
	  into tb_mail
	  (
	    em_no
	   ,em_title
	   ,em_content
	   ,mem_name
	   ,sender
	   ,receiver
	   ,ref_email
	   ,temp_stock
	   ,temp_date
	   )
	  values
	  (
	   seq_emno.nextval
	   ,#{emTitle}
	   ,#{emContent}
	   ,#{memName}
	   ,#{sender}
	   ,#{receivers}
	   ,#{refEmail}
	   ,'Y'
	   ,SYSDATE
	  )

</insert>

<!-- 방금임시저장한 메일번호 -->
<select id="selectGetEmNo" resultMap="mailResult">
select em_no
from
	(select em_no      
      from tb_mail
      where sender = #{memId}
      and temp_stock = 'Y'
      order by em_no desc )
where rownum = 1       

</select>


<!-- 임시저장한 메일 수정 -->
<update id="updateTemporaryMail">
	update tb_mail
	  set em_title = #{emTitle}
	   	,em_content = #{emContent}
	    ,mem_name = #{memName}
	    ,sender = #{sender}
	    ,receiver = #{receivers}
	    ,ref_email = #{refEmail}
	    ,temp_date = SYSDATE
	 where em_no = #{emNo}   
	  and temp_stock = 'Y'
	

</update>









</mapper>
