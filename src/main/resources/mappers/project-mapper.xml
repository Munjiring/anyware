<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="projectMapper">

	<resultMap type="Project" id="projectResult">
		<id column="project_no"  property="projectNo" />
		<result column="project_title"  property="projectTitle" />
		<result column="project_content"  property="projectContent" />
		<result column="public_status"  property="publicStatus" />
		<result column="create_date"  property="createDate" />
		<result column="status"  property="status" />
		<result column="like" property="like" />
		<result column="count" property="count" />
		<result column="owner" property="owner" />
		<result column="category" property="category" />
		<result column="participation" property="participation" />
		<collection property="listList" resultMap="listResult" />
	</resultMap>
	
	<resultMap type="PjList" id="listResult">
		<id column="list_no" property="listNo" />
		<result column="member_no" property="memberNo" />
		<result column="list_title" property="listTitle" />
		<result column="begin_date" property="beginDate" />
		<result column="end_date" property="endDate" />
		<result column="color" property="color" />
		<collection property="todoList" resultMap="todoResult" />
	</resultMap>
	
	<resultMap type="Member" id="memberResult">
		<id column="member_no" property="memberNo" />
		<result column="dept_name" property="deptName" />
		<result column="job_name" property="jobName" />
		<result column="job_code" property="jobCode" />
		<result column="name" property="name" />
		<result column="status" property="status" />
		<result column="owner_status" property="position" />
		<result column="profile_url" property="profileUrl" />
	</resultMap>
	
	<resultMap type="Todo" id="todoResult">
		<id column="todo_no" property="todoNo" />
		<result column="todo_title" property="todoTitle" />
		<result column="finish_status" property="finishStatus" />
	</resultMap>
	
	<resultMap type="ListChat" id="listChatResult">
		<result column="send_date" property="sendDate" />
		<collection property="chatInfo" ofType="ListChat">
			<id column="chat_no" property="chatNo" />
			<result column="writer_no" property="writerNo" />
			<result column="chat_content" property="chatContent" />
			<result column="origin_name" property="originName" />
			<result column="change_name" property="changeName" />
			<result column="send_time" property="sendTime" />
			<result column="name" property="name" />
			<result column="dept_name" property="deptName" />
			<result column="job_name" property="jobName" />
			<result column="profile_url" property="profileUrl" />
		</collection>
	</resultMap>

	<select id="selectListCount" resultType="_int">
		select
		       count(*)
		  from (select distinct
		               p.project_no
		          from tb_project p
		          <choose>
				  	<when test="category == 'all-search' or category == 'my' or category == 'my-search'">
				      join tb_projectmember pm on (pm.project_no = p.project_no)
				      join tb_member m on (pm.member_no = m.member_no)
				  	</when>
				  	<when test="category == 'like' or category == 'like-search'">
				  	  join tb_like l on (l.project_no = p.project_no)
		    		  join tb_projectmember pm on (pm.project_no = p.project_no)
		      		  join tb_member m on (pm.member_no = m.member_no)
				  	</when>
				  </choose>
				 where p.status = 'Y'
				 	<choose>
				 		<when test="category == 'my'">
				 			and pm.member_no = #{memberNo}
				 			and pm.status = 1
				 		</when>
				 		<when test="category == 'like'">
				 			and l.member_no = #{memberNo}
				 		</when>
				 		<when test="category == 'all-search' or category == 'my-search' or category == 'like-search'">
				 			<choose>
				 				<when test="condition == 'title'">
				 					and project_title
				 				</when>
				 				<otherwise>
				 					and name
				 				</otherwise>
				 			</choose>
				 				like '%' || #{keyword} || '%'
				 			<if test="category == 'my-search'">
				 				and p.project_no in (select
							                            project_no
							                       from tb_projectmember
							                      where member_no = #{memberNo}
							                        and status = 1)
				 			</if>
				 			<if test="category == 'like-search'">
				 				and p.project_no in (select
							                                project_no
							                           from tb_like
							                          where member_no = #{memberNo})
							</if>
				 		</when>
				 	</choose>
		        )
	</select>
	
	<select id="selectProjectList" resultMap="projectResult">
		select distinct
		       p.project_no
		     , project_title
		     , public_status
		     , (select 
		               count(*) 
		          from tb_like l 
		         where l.member_no = #{memberNo}
		           and project_no = p.project_no) "LIKE"
		     , (select
		               count(*)
		          from tb_projectmember pm
		         where pm.status = 1
		           and project_no = p.project_no) "COUNT"
		     , (select
		                name
		          from tb_projectmember pm
		          join tb_member using (member_no)
		         where pm.status = 1
		           and project_no = p.project_no
		           and owner_status = 'Y') "OWNER"
		     , (select
		               count(*)
		          from tb_projectmember
		         where project_no = p.project_no
		           and member_no = #{memberNo}
		           and status = 1) "PARTICIPATION"
		  from tb_project p
		  <choose>
		  	<when test="category == 'all-search' or category == 'my' or category == 'my-search'">
		      join tb_projectmember pm on (pm.project_no = p.project_no)
		      join tb_member m on (pm.member_no = m.member_no)
		  	</when>
		  	<when test="category == 'like' or category == 'like-search'">
		  	  join tb_like l on (l.project_no = p.project_no)
    		  join tb_projectmember pm on (pm.project_no = p.project_no)
      		  join tb_member m on (pm.member_no = m.member_no)
		  	</when>
		  </choose>
		 where p.status = 'Y'
		 	<choose>
		 		<when test="category == 'my'">
		 			and pm.member_no = #{memberNo}
		 			and pm.status = 1
		 		</when>
		 		<when test="category == 'like'">
		 			and l.member_no = #{memberNo}
		 		</when>
		 		<when test="category == 'all-search' or category == 'my-search' or category == 'like-search'">
		 			<choose>
		 				<when test="condition == 'title'">
		 					and project_title
		 				</when>
		 				<otherwise>
		 					and name
		 				</otherwise>
		 			</choose>
		 				like '%' || #{keyword} || '%'
		 			<if test="category == 'my-search'">
		 				and p.project_no in (select
					                            project_no
					                       from tb_projectmember
					                      where member_no = #{memberNo}
					                        and status = 1)
		 			</if>
		 			<if test="category == 'like-search'">
		 				and p.project_no in (select
					                                project_no
					                           from tb_like
					                          where member_no = #{memberNo})
					</if>
		 		</when>
		 	</choose>
		 order
		 	by p.project_no desc
	</select>
	
	<insert id="insertProject">
		insert
		  into tb_project
		  (
		  	project_no
		  , project_title
		  , project_content
		  , public_status
		  ) 
		  values
		  (
		  	seq_pjno.nextval
		  , #{projectTitle}
		  , #{projectContent}
		  , #{publicStatus}
		  )
	</insert>
	
	<insert id="insertProjectMember">
		insert
		  into tb_projectmember
		  (
		  	project_no
		  , member_no
		  , owner_status
		  )
		  values
		  (
		  	seq_pjno.currval
		  , #{memberNo}
		  , 'Y'
		  )
	</insert>
	
	<delete id="deleteProject">
		delete 
		  from tb_project
		 where project_no = seq_pjno.currval
	</delete>
	
	<select id="selectNewProject" resultType="_int">
		select
			   seq_pjno.currval
		  from dual
	</select>
	
	<insert id="insertLike">
		insert
		  into tb_like
		  (
		  	member_no
		  , project_no
		  , like_date
		  )
		  values
		  (
		  	#{memberNo}
		  , #{projectNo}
		  , sysdate
		  )
	</insert>
	
	<delete id="deleteLike">
		delete
		  from tb_like
		 where member_no = #{memberNo}
		   and project_no = #{projectNo}
	</delete>
	
	<select id="selectRequestStatus" resultType="_int">
		select
			   count(*)
		  from tb_projectmember
		 where project_no = #{projectNo}
		   and member_no = #{memberNo}
		   and status = 2
	</select>
	
	<insert id="addRequest">
		insert
		  into tb_projectmember
		  (
		  	project_no
		  , member_no
		  , status
		  , owner_status
		  )
		  values
		  (
		  	#{projectNo}
		  , #{memberNo}
		  , 2
		  , 'N'
		  )
	</insert>
	
	<select id="selectProjectDetail" resultMap="projectResult">
		select
		       p.project_no
		     , project_title
		     , project_content
		     , list_no
		     , list_title
		     , to_char(to_date(begin_date, 'yy/mm/dd'), 'yy/mm/dd') "BEGIN_DATE"
		     , to_char(to_date(end_date, 'yy/mm/dd'), 'yy/mm/dd') "END_DATE"
		     , color
		     , (select
		               count(*)
		          from tb_projectmember
		         where project_no = p.project_no
		           and member_no = #{memberNo}
		           and status = 1) "participation"
		  from tb_project p
		  left join tb_list l on (p.project_no = l.project_no)
		 where p.project_no = #{projectNo}
		 order
		    by to_date(end_date, 'yy/mm/dd') asc
	</select>
	
	<insert id="insertList">
		insert
		  into tb_list
		  (
		  	list_no
		  , project_no
		  , member_no
		  , list_title
		  , begin_date
		  , end_date
		  , color
		  )
		  values
		  (
		  	seq_lino.nextval
		  , #{projectNo}
		  , #{memberNo}
		  , #{listTitle}
		  , #{beginDate}
		  , #{endDate}
		  , #{color}
		  )
	</insert>
	
	<select id="selectDeptList" resultMap="memberResult">
		select distinct
		       dept_name
		  from tb_member
		 where not dept_name = '미정'
		 order
		    by dept_name asc
	</select>
	
	<select id="selectMemberList" resultMap="memberResult">
		select
		       member_no
		     , dept_name
		     , name
		     , decode(job_name, '대표이사', 1, '부사장', 2, '부장', 3, '과장', 4, '대리', 5, '사원', 6) job_code
		     , job_name
		  from tb_member
		 order
		    by dept_name, job_code
	</select>
	
	<select id="selectParticipantList" resultMap="memberResult">
		select
			   pm.member_no
		     , name
		     , dept_name
		     , job_name
		     , pm.status "status"
		  from tb_member m
		  join tb_projectMember pm on (m.member_no = pm.member_no)
		 where project_no = #{projectNo}
	</select>
	
	<insert id="addParticipant">
		insert
		  into tb_projectmember
		  (
		  	project_no
		  , member_no
		  , status
		  , owner_status
		  )
		  values
		  (
		  	#{projectNo}
		  , #{memberNo}
		  , 1
		  , 'N'
		  )
	</insert>
	
	<select id="selectParticipant" resultMap="memberResult">
		select
			   pm.member_no
		     , name
		     , dept_name
		     , job_name
		     , pm.status "status"
		     , owner_status
		  from tb_member m
		  join tb_projectMember pm on (m.member_no = pm.member_no)
		 where project_no = #{projectNo}
		   and pm.member_no = #{memberNo}
	</select>
	
	<delete id="deleteParticipant">
		delete
		  from tb_projectmember
		 where project_no = #{projectNo}
		   and member_no = #{memberNo}
	</delete>
	
	<update id="acceptParticipant">
		update
			   tb_projectmember
		   set status = 1
		 where project_no = #{projectNo}
		   and member_no = #{memberNo}
	</update>
	
	<delete id="rejectParticipant">
		delete
		  from tb_projectmember
		 where project_no = #{projectNo}
		   and member_no = #{memberNo}
	</delete>
	
	<select id="selectList" resultMap="listResult">
		select
		       l.list_no
		     , list_title
		     , to_char(to_date(begin_date, 'yy/mm/dd'), 'yy/mm/dd') "BEGIN_DATE"
		     , to_char(to_date(end_date, 'yy/mm/dd'), 'yy/mm/dd') "END_DATE"
		     , todo_no
		     , todo_title
		     , finish_status
		     , color
		  from tb_list l
		  left join tb_todo td on (l.list_no = td.list_no)
		 where l.list_no = #{listNo}
		 order
		 	by todo_no asc
	</select>
	
	<insert id="addTodo">
		insert
		  into tb_todo
		  (
		  	todo_no
		  , list_no
		  , member_no
		  , todo_title
		  )
		  values
		  (
		  	seq_tdno.nextval
		  , #{listNo}
		  , #{tdMemberNo}
		  , #{todoTitle}
		  )
	</insert>
	
	<select id="selectTodoNo" resultType="_int">
		select
			   seq_tdno.currval
		  from dual
	</select>
	
	<select id="selectTodo" resultMap="todoResult">
		select
			   todo_no
			 , todo_title
			 , finish_status
		  from tb_todo
		 where todo_no = #{todoNo}
	</select>
	
	<update id="updateTodo">
		update
			   tb_todo
		<choose>
			<when test="length == 1">
				set finish_status = 'N'
			</when>
			<otherwise>
				set finish_status = 'Y'
			</otherwise>
		</choose>
		 where todo_no = #{todoNo}
	</update>
	
	<delete id="deleteTodo">
		delete
		  from tb_todo
		 where todo_no = #{todoNo} 
	</delete>
	
	<select id="selectListChatList" resultMap="listChatResult">
		select
		       to_char(send_date, 'YYYY"년" MM"월" DD"일"') "send_date"
		     , chat_no
		     , writer_no
		     , name
		     , profile_url
		     , dept_name
		     , job_name
		     , chat_content
		     , origin_name
		     , change_name
		     , to_char(send_date, 'HH24:mi') "send_time"
		  from tb_listchat
		  join tb_member on (member_no = writer_no)
		 where list_no = #{listNo}
		 order
		    by send_date asc
	</select>
	
	<insert id="insertListChat">
		insert
		  into tb_listchat
		  (
		  	chat_no
		  , list_no
		  , writer_no
		  , chat_content
		  )
		  values
		  (
		  	seq_lichno.nextval
		  , #{listNo}
		  , #{writerNo}
		  , #{chatContent}
		  )
	</insert>
	
	<update id="updateList">
		update
			   tb_list
		   set member_no = #{memberNo}
		   	 , list_title = #{listTitle}
		   	 , begin_date = #{beginDate}
		   	 , end_date = #{endDate}
		   	 , color = #{color}
		   	 , enroll_date = sysdate
		 where list_no = #{listNo}
	</update>
	
</mapper>
